package dal;

import context.DBContext;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import model.Appointment;
import model.Car;
import model.MaintenancePackage;
import model.User;

public class AppointmentDAO extends DBContext {

    public boolean insertAppointment(Appointment a) {
        String sql = "INSERT INTO Appointments "
                + "(CarId, AppointmentDate, RequestedServices, Status, Notes, CreatedBy, CreatedDate, RequestedPackageID) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        try (PreparedStatement ps = connection.prepareStatement(sql)) {

            ps.setInt(1, a.getCar().getCarId());
            ps.setString(2, a.getAppointmentDate());
            ps.setString(3, a.getRequestedServices());
            ps.setString(4, a.getStatus());
            ps.setString(5, a.getNotes());
            ps.setInt(6, a.getCreatedBy().getUserId());
            ps.setTimestamp(7, new Timestamp(System.currentTimeMillis()));
            ps.setInt(8, a.getRequestedPackage().getPackageId());

            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }

        return false;
    }

  
    public List<Appointment> getAppointmentsByUserId(int userId) {
        List<Appointment> list = new ArrayList<>();
        String sql = """
            SELECT 
                a.AppointmentID,
                a.AppointmentDate,
                a.RequestedServices,
                a.Status,
                a.Notes,
                a.CreatedDate,
                c.CarID, c.LicensePlate, c.Brand, c.Model,
                mp.PackageID, mp.Name AS PackageName, mp.FinalPrice
            FROM Appointments a
            INNER JOIN Cars c ON a.CarID = c.CarID
            LEFT JOIN MaintenancePackage mp ON a.RequestedPackageID = mp.PackageID
            WHERE c.OwnerID = ?
            ORDER BY a.AppointmentDate DESC
        """;

        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, userId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Appointment ap = new Appointment();

                Car car = new Car();
                car.setCarId(rs.getInt("CarID"));
                car.setLicensePlate(rs.getString("LicensePlate"));
                car.setBrand(rs.getString("Brand"));
                car.setModel(rs.getString("Model"));

                MaintenancePackage pkg = new MaintenancePackage();
                pkg.setPackageId(rs.getInt("PackageID"));
                pkg.setName(rs.getString("PackageName"));
                pkg.setFinalPrice(rs.getBigDecimal("FinalPrice"));

                ap.setAppointmentId(rs.getInt("AppointmentID"));
                ap.setAppointmentDate(rs.getString("AppointmentDate"));
                ap.setRequestedServices(rs.getString("RequestedServices"));
                ap.setStatus(rs.getString("Status"));
                ap.setNotes(rs.getString("Notes"));
                ap.setCreatedDate(rs.getTimestamp("CreatedDate").toString());
                ap.setCar(car);
                ap.setRequestedPackage(pkg);

                list.add(ap);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }
    
    public List<Appointment> getAppointmentsByFilter(int userId, String dateFilter, String packageFilter) {
    List<Appointment> list = new ArrayList<>();

    String sql = "SELECT a.*, mp.PackageID, mp.Name AS PackageName "
               + "FROM Appointments a "
               + "LEFT JOIN MaintenancePackage mp ON a.RequestedPackageID = mp.PackageID "
               + "WHERE a.CreatedBy = ?";

    if (dateFilter != null && !dateFilter.isEmpty()) {
        sql += " AND CAST(a.AppointmentDate AS DATE) = ?";
    }
    if (packageFilter != null && !packageFilter.isEmpty()) {
        sql += " AND mp.Name LIKE ?";
    }

    try (PreparedStatement ps = connection.prepareStatement(sql)) {
        int index = 1;
        ps.setInt(index++, userId);
        if (dateFilter != null && !dateFilter.isEmpty()) {
            ps.setString(index++, dateFilter);
        }
        if (packageFilter != null && !packageFilter.isEmpty()) {
            ps.setString(index++, "%" + packageFilter + "%");
        }

        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            Appointment ap = new Appointment();
            ap.setAppointmentId(rs.getInt("AppointmentID"));
            ap.setAppointmentDate(rs.getString("AppointmentDate"));
            ap.setRequestedServices(rs.getString("RequestedServices"));
            ap.setStatus(rs.getString("Status"));
            ap.setNotes(rs.getString("Notes"));

            // N·∫øu c√≥ g√≥i b·∫£o d∆∞·ª°ng
            if (rs.getInt("PackageID") != 0) {
                model.MaintenancePackage pkg = new model.MaintenancePackage();
                pkg.setPackageId(rs.getInt("PackageID"));
                pkg.setName(rs.getString("PackageName"));
                ap.setRequestedPackage(pkg);
            }

            list.add(ap);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return list;
}

    
public static void main(String[] args) {
    AppointmentDAO dao = new AppointmentDAO();

    // üîπ Gi·∫£ l·∫≠p th√¥ng tin ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
    int userId = 13; // ID ng∆∞·ªùi d√πng c√≥ s·∫µn trong b·∫£ng Users

    // üîπ B·ªô l·ªçc (b·∫°n c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªÉ test)
    String dateFilter = "2025-10-20";     // ho·∫∑c ƒë·ªÉ null n·∫øu kh√¥ng mu·ªën l·ªçc theo ng√†y
    String packageFilter = "B·∫£o d∆∞·ª°ng";   // ho·∫∑c ƒë·ªÉ null n·∫øu kh√¥ng mu·ªën l·ªçc theo t√™n g√≥i

    // üîπ G·ªçi h√†m l·∫•y danh s√°ch l·ªãch h·∫πn
    List<Appointment> list = dao.getAppointmentsByFilter(userId, dateFilter, packageFilter);

    // üîπ In k·∫øt qu·∫£ ra console
    if (list.isEmpty()) {
        System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn n√†o kh·ªõp v·ªõi b·ªô l·ªçc!");
    } else {
        System.out.println("‚úÖ Danh s√°ch l·ªãch h·∫πn c·ªßa UserID " + userId + ":");
        for (Appointment ap : list) {
            System.out.println("--------------------------------------");
            System.out.println("AppointmentID: " + ap.getAppointmentId());
            System.out.println("Ng√†y h·∫πn: " + ap.getAppointmentDate());
            System.out.println("D·ªãch v·ª• y√™u c·∫ßu: " + ap.getRequestedServices());
            System.out.println("Tr·∫°ng th√°i: " + ap.getStatus());
            System.out.println("Ghi ch√∫: " + ap.getNotes());
        }
    }
}

}

